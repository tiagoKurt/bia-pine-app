#!/usr/bin/env php
<?php

$projectRoot = dirname(__DIR__);

require_once $projectRoot . '/vendor/autoload.php';

use CpfScanner\Ckan\CkanApiClient;
use CpfScanner\Parsing\Factory\FileParserFactory;
use CpfScanner\Scanning\Strategy\LogicBasedScanner;
use CpfScanner\Scanning\Strategy\AiBasedScanner;
use Dotenv\Dotenv;

try {
    $dotenv = Dotenv::createImmutable($projectRoot);
    $dotenv->load();
    $dotenv->required(['CKAN_API_URL']);
} catch (RuntimeException $e) {
    echo "‚ùå Erro: " . $e->getMessage() . "\n";
    echo "Certifique-se de que o arquivo .env existe e cont√©m as vari√°veis necess√°rias.\n";
    echo "Use o arquivo env.example como modelo.\n";
    exit(1);
}

$ckanUrl = $_ENV['CKAN_API_URL'];
$ckanApiKey = $_ENV['CKAN_API_KEY'] ?? '';
$geminiApiKey = $_ENV['GEMINI_API_KEY'] ?? '';
$maxChunkSize = (int)($_ENV['MAX_CHUNK_SIZE'] ?? 15000);
$maxRetries = (int)($_ENV['MAX_RETRY_ATTEMPTS'] ?? 5);
$cacheDir = $_ENV['CACHE_DIR'] ?? 'cache';

echo "üîç Selecionando a estrat√©gia de verifica√ß√£o...\n";

$scanner = new LogicBasedScanner();
echo "‚úÖ Modo selecionado: Verificador L√≥gico Determin√≠stico.\n";

$ckanClient = new CkanApiClient($ckanUrl, $ckanApiKey, $cacheDir, $maxRetries);

$tempDir = sys_get_temp_dir() . '/ckan_scanner_' . uniqid();
if (!is_dir($tempDir)) {
    mkdir($tempDir, 0755, true);
}

echo "üåê Iniciando a varredura do portal CKAN em: {$ckanUrl}\n";
echo "üìÅ Diret√≥rio tempor√°rio: {$tempDir}\n";

echo "üìä Buscando lista de datasets...\n";
$datasetIds = $ckanClient->getAllDatasetIds();
$totalDatasets = count($datasetIds);
echo "üìà Total de datasets encontrados: {$totalDatasets}\n";

if ($totalDatasets === 0) {
    echo "‚ö†Ô∏è  Nenhum dataset encontrado no portal.\n";
    exit(0);
}

$findings = [];
$datasetCount = 0;
$totalResources = 0;
$processedResources = 0;
$errors = 0;

echo "\nüîç Iniciando verifica√ß√£o de CPFs...\n";
echo str_repeat("=", 60) . "\n";

foreach ($datasetIds as $datasetId) {
    $datasetCount++;
    echo "üì¶ Processando dataset {$datasetCount}/{$totalDatasets}: {$datasetId}\n";
    
    $datasetDetails = $ckanClient->getDatasetDetails($datasetId);
    if (!$datasetDetails || empty($datasetDetails['resources'])) {
        echo "  ‚ö†Ô∏è  Dataset sem recursos ou erro ao carregar.\n";
        continue;
    }

    $resources = $datasetDetails['resources'];
    $totalResources += count($resources);
    
    foreach ($resources as $resource) {
        $resourceUrl = $resource['url'] ?? null;
        $resourceFormat = strtolower($resource['format'] ?? 'unknown');
        $resourceName = $resource['name'] ?? $resource['id'];
        $resourceId = $resource['id'] ?? 'unknown';

        if (!$resourceUrl) {
            echo "  ‚ö†Ô∏è  Recurso sem URL: {$resourceName}\n";
            continue;
        }

        $processedResources++;
        echo "  üìÑ Processando recurso {$processedResources}: {$resourceName} ({$resourceFormat})\n";

        try {
            $fileName = basename(parse_url($resourceUrl, PHP_URL_PATH));
            if (empty($fileName)) {
                $fileName = $resourceId . '.' . $resourceFormat;
            }
            
            $filePath = $tempDir . '/' . $fileName;
            
            echo "    ‚¨áÔ∏è  Baixando arquivo...\n";
            $fileContent = file_get_contents($resourceUrl);
            
            if ($fileContent === false) {
                // Caso extremo de falha de I/O ou rede (mantido)
                throw new \Exception("Falha ao baixar o arquivo: file_get_contents retornou false.");
            }
            
            // 1. VALIDA√á√ÉO DE CONTE√öDO: Verificar se o arquivo n√£o est√° vazio.
            if (empty($fileContent)) {
                echo "    ‚ùå O arquivo baixado est√° vazio.\n";
                continue;
            }

            // 2. VALIDA√á√ÉO DE CABE√áALHO M√ÅGICO para PDF.
            // Verifica se os primeiros 5 bytes s√£o %PDF-
            if ($resourceFormat === 'pdf' && substr(trim($fileContent), 0, 5) !== '%PDF-') {
                // Se n√£o for um PDF v√°lido, pode ser um HTML de erro.
                if (strpos(trim($fileContent), '<!DOCTYPE html>') !== false) {
                    echo "    ‚ùå O download do recurso PDF retornou uma p√°gina de erro HTML.\n";
                } else {
                    echo "    ‚ùå O arquivo baixado n√£o possui o cabe√ßalho m√°gico de um PDF (%PDF-).\n";
                    echo "    üìù Primeiros bytes: " . substr($fileContent, 0, 20) . "...\n";
                }
                continue;
            }

            // 3. VALIDA√á√ÉO DE TAMANHO para evitar arquivos muito grandes
            if (strlen($fileContent) > 110 * 1024 * 1024) { // 200MB
                echo "    ‚ùå Arquivo muito grande: " . round(strlen($fileContent) / 1024 / 1024, 2) . "MB\n";
                continue;
            }
            
            // Salva o arquivo SOMENTE se as valida√ß√µes passarem
            file_put_contents($filePath, $fileContent);
            echo "    ‚úÖ Arquivo baixado e validado com sucesso (" . round(strlen($fileContent) / 1024, 2) . "KB)\n";

            echo "    üîç Analisando conte√∫do...\n";
            $parser = FileParserFactory::createParserFromFile($filePath);
            $textContent = $parser->getText($filePath);

            if (empty(trim($textContent))) {
                echo "    ‚ö†Ô∏è  Arquivo vazio ou sem conte√∫do textual.\n";
                unlink($filePath);
                continue;
            }

            echo "    üîé Verificando CPFs...\n";
            $foundCpfs = $scanner->scan($textContent);

            if (!empty($foundCpfs)) {
                $findings[] = [
                    'resource_name' => $resourceName,
                    'resource_id' => $resourceId,
                    'dataset_id' => $datasetId,
                    'resource_url' => $resourceUrl,
                    'resource_format' => $resourceFormat,
                    'cpfs' => $foundCpfs,
                    'cpf_count' => count($foundCpfs)
                ];
                
                echo "    ‚ö†Ô∏è  CPFs encontrados: " . count($foundCpfs) . "\n";
            } else {
                echo "    ‚úÖ Nenhum CPF encontrado.\n";
            }

            unlink($filePath);

        } catch (\Exception $e) {
            $errors++;
            echo "    ‚ùå Erro ao processar recurso '{$resourceName}': " . $e->getMessage() . "\n";
            error_log("Erro ao processar recurso '{$resourceName}': " . $e->getMessage());
            
            if (isset($filePath) && file_exists($filePath)) {
                unlink($filePath);
            }
        }
    }
}

echo "\n" . str_repeat("=", 60) . "\n";
echo "üìã RELAT√ìRIO DE VERIFICA√á√ÉO DE CPF\n";
echo str_repeat("=", 60) . "\n";

echo "üìä Estat√≠sticas Gerais:\n";
echo "  ‚Ä¢ Datasets processados: {$datasetCount}/{$totalDatasets}\n";
echo "  ‚Ä¢ Recursos processados: {$processedResources}/{$totalResources}\n";
echo "  ‚Ä¢ Erros encontrados: {$errors}\n";

if (empty($findings)) {
    echo "\n‚úÖ Nenhum CPF v√°lido foi encontrado em nenhum recurso do portal.\n";
    echo "üéâ O portal est√° em conformidade com as pr√°ticas de prote√ß√£o de dados!\n";
} else {
    echo "\n‚ö†Ô∏è  " . count($findings) . " recurso(s) com potenciais vazamentos de dados encontrados:\n\n";
    
    foreach ($findings as $index => $finding) {
        echo "üîç Vazamento #" . ($index + 1) . ":\n";
        echo "  üì¶ Dataset ID: {$finding['dataset_id']}\n";
        echo "  üìÑ Recurso: {$finding['resource_name']}\n";
        echo "  üÜî ID do Recurso: {$finding['resource_id']}\n";
        echo "  üìã Formato: {$finding['resource_format']}\n";
        echo "  üîó URL: {$finding['resource_url']}\n";
        echo "  üî¢ CPFs Detectados: {$finding['cpf_count']}\n";
        
        echo "  üìù CPFs Encontrados: " . implode(', ', $finding['cpfs']) . "\n\n";
    }
    
    echo "üö® A√á√ÉO NECESS√ÅRIA:\n";
    echo "  ‚Ä¢ Revise imediatamente os recursos listados acima\n";
    echo "  ‚Ä¢ Remova ou anonimize os dados de CPF encontrados\n";
    echo "  ‚Ä¢ Implemente controles para prevenir futuros vazamentos\n";
    echo "  ‚Ä¢ Considere a notifica√ß√£o √†s autoridades competentes se necess√°rio\n";
}

$cacheStats = $ckanClient->getCacheStats();
echo "\nüíæ Estat√≠sticas do Cache:\n";
echo "  ‚Ä¢ Arquivos em cache: {$cacheStats['files_count']}\n";
echo "  ‚Ä¢ Tamanho total: {$cacheStats['total_size_mb']} MB\n";

echo "\nüßπ Limpando arquivos tempor√°rios...\n";
array_map('unlink', glob("$tempDir/*.*"));
rmdir($tempDir);

echo "‚úÖ Verifica√ß√£o conclu√≠da.\n";
echo "üìÖ Data/Hora: " . date('d/m/Y H:i:s') . "\n";

exit(0);